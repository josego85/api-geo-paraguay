services:
  app:
    stdin_open: true
    container_name: app-api-geo-paraguay
    restart: always
    build:
      context: .
      dockerfile: ./docker/dev/app/Dockerfile
    ports:
      - '5000:5000'
    depends_on:
      - database
      - mongodb
      - cache
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      DB_HOST: database
      DB_PORT: 3306
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    networks:
      - app-network

  database:
    image: mysql:8.0.43
    container_name: database-api-geo-paraguay
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - 'mysql-data:/var/lib/mysql'
      - '/db/init.sql:/docker-entrypoint-initdb.d/init.sql'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'database']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongo:7.0.23-jammy
    container_name: mongodb-api-geo-paraguay
    restart: always
    ports:
      - '28017:27017'
    volumes:
      - dbdata6:/data/db
    networks:
      - app-network

  cache:
    image: redis:8.2.1-alpine
    container_name: cache-api-geo-paraguay
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - cache:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - '9000:9000'
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - app-network

  diun:
    image: crazymax/diun:4.29.0
    command: serve --config /docker/dev/diun/diun.yml
    volumes:
      - './docker/dev/diun:/docker/diun'
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - TZ=Europe/Berlin
    restart: always
    networks:
      - app-network

volumes:
  mysql-data:
  dbdata6:
  cache:
    driver: local
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  app-network:
    driver: bridge

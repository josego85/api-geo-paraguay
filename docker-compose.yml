services:
  app:
    stdin_open: true
    container_name: app-api-geo-paraguay
    restart: always
    build:
      context: .
      dockerfile: ./docker/prod/app/Dockerfile
    ports:
      - '5000:5000'
    depends_on:
      - database
      - mongodb
      - cache
    volumes:
      - ./:/app
    environment:
      NODE_ENV: production
    networks:
      - app-network

  nginx:
    build:
      context: ./docker/prod/nginx
      dockerfile: Dockerfile
    container_name: nginx-api-geo-paraguay
    restart: always
    ports:
      - '80:80'
    volumes:
      - ./docker/prod/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - type: volume
        source: nginx-logs
        target: /var/log/nginx
        volume:
          nocopy: true
      - type: bind
        source: ./docker/prod/nginx/empty-conf.d
        target: /etc/nginx/conf.d
    depends_on:
      - app
    networks:
      - app-network

  database:
    image: mysql:8.0.43
    container_name: database-api-geo-paraguay
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '3406:3306'
    expose:
      - '3306'
    volumes:
      - 'mysql-data:/var/lib/mysql'
      - '/db/init.sql:/docker-entrypoint-initdb.d/init.sql'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'database']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongo:7.0.23-jammy
    container_name: mongodb-api-geo-paraguay
    restart: always
    ports:
      - '28017:27017'
    volumes:
      - dbdata6:/data/db
    networks:
      - app-network

  cache:
    image: redis:8.2.1-alpine
    container_name: cache-api-geo-paraguay
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - cache:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  nginx-logs: {}
  mysql-data:
  dbdata6:
  cache:
    driver: local

networks:
  app-network:
    driver: bridge
